// Replace with your threat hunting team's email address
const THREAT_HUNTING_TEAM_EMAIL = "contact@dominicspucches.com";

function onFormSubmit(e) {
  if (!e || !e.response) {
    Logger.log("No response data found.");
    return;
  }

  try {
    const submissionNumber = getNextSubmissionNumber();
    const emailData = buildEmailData(e, submissionNumber);

    // Email options
    const emailSubject = `[${emailData.priority.toUpperCase()}] Threat Hunting Request #${submissionNumber}`;
    const emailOptions = {
      htmlBody: emailData.body,
    };

    // Send the email to the threat hunting team
    GmailApp.sendEmail(THREAT_HUNTING_TEAM_EMAIL, emailSubject, "", emailOptions);

    Logger.log(`Email sent successfully for Submission #${submissionNumber}`);
  } catch (error) {
    Logger.log(`Error processing form submission: ${error.message}`);
  }
}

// Generate the next unique submission number
function getNextSubmissionNumber() {
  const properties = PropertiesService.getScriptProperties();
  let submissionNumber = properties.getProperty("submissionNumber");
  submissionNumber = submissionNumber ? parseInt(submissionNumber, 10) + 1 : 1;
  properties.setProperty("submissionNumber", submissionNumber);
  return submissionNumber;
}

// Build the email data, skipping empty fields
function buildEmailData(e, submissionNumber) {
  const form = FormApp.getActiveForm();
  const formName = form.getTitle();
  const timestamp = new Date();
  const response = e.response;
  const items = form.getItems();

  let emailBody = `<h2>Threat Hunting Request #${submissionNumber}: "${formName}"</h2>`;
  emailBody += `<p><strong>Submission Time:</strong> ${timestamp.toLocaleString()}</p>`;
  emailBody += `<p><strong>Submission Number:</strong> #${submissionNumber}</p>`;
  emailBody += `<table border='1' style='border-collapse:collapse; width:100%;'>`;

  let requestorEmail = "";
  let priority = "Medium"; // Default priority

  items.forEach((item) => {
    const question = item.getTitle();
    const responseItem = response.getResponseForItem(item);
    const responseText = responseItem ? responseItem.getResponse() : null;

    // Skip empty fields
    if (!responseText || responseText.trim() === "") return;

    // Capture requestor's email and priority if available
    if (question.toLowerCase().includes("email")) {
      requestorEmail = responseText;
    }
    if (question.toLowerCase().includes("priority")) {
      priority = responseText;
    }

    // Add question and response to the email body
    emailBody += `
      <tr>
        <td style="padding:8px; width:30%; background-color:#f4f4f4;"><strong>${question}</strong></td>
        <td style="padding:8px; width:70%;">${responseText}</td>
      </tr>`;
  });

  emailBody += `</table>`;

  // Highlight priority with dynamic colors or icons
  const priorityColor = priority === "High" ? "red" : priority === "Low" ? "green" : "orange";
  emailBody += `
    <p><strong>Priority:</strong> <span style="color:${priorityColor};">${priority}</span></p>`;

  emailBody += `
    <p><strong>Next Steps:</strong></p>
    <ul>
      <li>Review the request details.</li>
      <li>Analyze any attached logs or reports.</li>
      <li>Contact the requestor at ${requestorEmail || "N/A"} for clarification, if needed.</li>
      <li>Escalate critical issues to the appropriate team.</li>
    </ul>
    <p><em>This email was auto-generated by the Threat Hunting Request Form. For questions, contact support@example.com.</em></p>`;

  return {
    body: emailBody,
    priority,
  };
}

// Installable trigger setup function
function setupTrigger() {
  const form = FormApp.getActiveForm();
  ScriptApp.newTrigger("onFormSubmit")
    .forForm(form)
    .onFormSubmit()
    .create();
}
